
# pipeline of yarn apps
input {
  exec {
    command => "find /var/log/logstash -name yarn.apps -size +100M -delete; python /opt/logstash/bin/yarn-apps.py >> /var/log/logstash/yarn.apps"
    interval => 60
  }
}
input {
  file {
    path => "/var/log/logstash/yarn.apps"
    sincedb_path => "/var/log/logstash/.sincedb2/yarn.apps"
    type => "yarn.apps"
  }
}
filter {
  if [type] == "yarn.apps" {
    grok {
      match => { 
        "message" => "%{TIMESTAMP_ISO8601:logdate}\s+%{GREEDYDATA:appId}\s+%{WORD:appType}\s+%{WORD:appState}\s+%{WORD:finalStatus}\s+%{GREEDYDATA:queue}\s+%{GREEDYDATA:user}\s+%{NUMBER:vCores}\s+%{NUMBER:memory}\s+%{NUMBER:vCoreCapacity}\s+%{NUMBER:memoryCapacity}\s+%{NUMBER:vcoreSeconds}\s+%{NUMBER:memorySeconds}\s+%{NUMBER:elapsedTime}\s+%{TIMESTAMP_ISO8601:finishedTime}"
      }
    }
    if ("_grokparsefailure" in [tags]) { drop {} }
    mutate {
      replace => ["logdate","%{logdate}+08:00"]
      replace => ["finishedTime","%{finishedTime}+08:00"]
      convert => ["vCores", "integer"]
      convert => ["memory", "integer"]
      convert => ["vCoreCapacity", "integer"]
      convert => ["memoryCapacity", "integer"]
      convert => ["vcoreSeconds", "integer"]
      convert => ["memorySeconds", "integer"]
      convert => ["elapsedTime", "integer"]
    }
  }
}
output {
  if [type] == "yarn.apps" {
    if [appState] == "RUNNING" or [vCores] != 0 or [memory] != 0 {
      elasticsearch {
        hosts => ["ochadoop13.jcloud.local:9225"]
        index => "mylogstash-yarn-running"
        template => "/var/log/logstash/template-running.json"
        template_name => "logstash-yarn-running"
      }
    }
    if [appType] != "OTHERS" {
      elasticsearch {
        hosts => ["ochadoop13.jcloud.local:9225"]
        index => "mylogstash-yarn-apps"
        document_id => "yarn-%{appId}"
        doc_as_upsert => true
        action => "update"
        template => "/var/log/logstash/template-finished.json"
        template_name => "logstash-yarn-apps"
      }
    }
  }
}

# pipeline of disk usage
input {
  exec {
    command => "su ocdp -c 'hdfs dfs -df'"
    interval => 3600
    type => "disk"
  }
}
filter {
  if [type] == "disk" {
    grok {
      match => {
        "message" => "(?<filesystem>hdfs.*)\s+%{NUMBER:total}\s+%{NUMBER:used}\s+%{NUMBER:avail}\s+(?<used_percent>.*)%\n"
      }
    }
    if ("_grokparsefailure" in [tags]) { drop {} }
    mutate {
      convert => ["filesystem", "string"]
      convert => ["total", "integer"]
      convert => ["used", "integer"]
      convert => ["avail", "integer"]
      convert => ["used_percent", "integer"]
    }
    ruby {
          code => "event['total'] = event['total']/1073741824.0
          event['used'] = event['used']/1073741824.0
          event['avail'] = event['avail']/1073741824.0"
    }
  }
}
output {
  if [type] == "disk" {
    elasticsearch {
      hosts => ["ochadoop13.jcloud.local:9225"]
      index => "logstash-disk"
      template => "/var/log/logstash/template-disk.json"
      template_name => "logstash-disk"
    }
  }
}

